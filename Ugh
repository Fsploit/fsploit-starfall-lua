local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Starfall.lua",
    SubTitle = "Blade Ball",
    TabWidth = 170,
    Size = UDim2.fromOffset(450, 225),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.RightControl -- Used when theres no MinimizeKeybind
})

local Tabs = {
    Main = Window:AddTab({ Title = "Parry", Icon = "shield" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "component" }),
    Credits = Window:AddTab({ Title = "Credits", Icon = "copyright" })
}

local Options = Fluent.Options

--functions
-- ugh

function SwordCrateManual()
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate", workspace.Spawn.Crates.NormalSwordCrate)
end

function ExplosionCrateManual()
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate", workspace.Spawn.Crates.NormalExplosionCrate)
end

function SwordCrateAuto()
while _G.AutoSword do
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate", workspace.Spawn.Crates.NormalSwordCrate)
wait(1)
end
end

function ExplosionCrateAuto()
while _G.AutoBoom do
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate", workspace.Spawn.Crates.NormalExplosionCrate)
wait(1)
end
end

--start
do
    Fluent:Notify({
        Title = "Starfall.lua has injected",
        Content = "report any bugs at https://dsc.gg/exploitx",
        SubContent = "or copy the link trough the 'Misc' page", -- Optional
        Duration = 3.5 -- Set to nil to make the notification not disappear
    })
end

--start, the real one
local Mainy = Tabs.Main:AddSection("Parry")

local Toggle = Mainy:AddToggle("Parry", {Title = "Toggle Auto Parry", Default = false })
Toggle:OnChanged(function(state)
    local runService = game:GetService("RunService")
    local players = game:GetService("Players")
    local workspace = game:GetService("Workspace")
    local vim = game:GetService("VirtualInputManager")
    local ballFolder = workspace.Balls

    local indicatorPart = Instance.new("Part")
    indicatorPart.Size = Vector3.new(5, 5, 5)
    indicatorPart.Anchored = true
    indicatorPart.CanCollide = false
    indicatorPart.Transparency = 1
    indicatorPart.BrickColor = BrickColor.new("Bright red")
    indicatorPart.Parent = workspace

    local lastBallPressed, isKeyPressed = nil, false

    local function calculatePredictionTime(ball, player)
        local rootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            local relativePosition = ball.Position - rootPart.Position
            local velocity = ball.Velocity + rootPart.Velocity 
            local a = ball.Size.magnitude / 2
            local b = relativePosition.magnitude
            local c = math.sqrt(a * a + b * b)
            return (c - a) / velocity.magnitude
        end
        return math.huge
    end

    local function checkProximityToPlayer(ball, player)
        local predictionTime = calculatePredictionTime(ball, player)
        local realBallAttribute = ball:GetAttribute("realBall")
        local target = ball:GetAttribute("target")

        local ballSpeedThreshold = math.max(0.4, 0.6 - ball.Velocity.magnitude * 0.01)
        if predictionTime <= ballSpeedThreshold and realBallAttribute and target == player.Name and not isKeyPressed then
            vim:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
            wait(0.005)
            vim:SendKeyEvent(false, Enum.KeyCode.F, false, nil)
            lastBallPressed = ball
            isKeyPressed = true
        elseif lastBallPressed == ball and (predictionTime > ballSpeedThreshold or not realBallAttribute or target ~= player.Name) then
            isKeyPressed = false
        end
    end

    local function checkBallsProximity()
        local player = players.LocalPlayer
        if player then
            for _, ball in pairs(ballFolder:GetChildren()) do
                checkProximityToPlayer(ball, player)
            end
        end
    end

    if state then
        runService.Heartbeat:Connect(checkBallsProximity)
    else
        lastBallPressed = nil
        isKeyPressed = false
    end
        end
end)

Mainy:AddButton({
        Title = "Launch Spam Parry GUI",
        Description = "litteraly says it", Default = false })
        Toggle:OnChanged(function(Value)
loadstring(game:HttpGet("https://raw.githubusercontent.com/Atreus-Hub/Open-Source/main/manual%20spam"))()
end)
        end
    })
    
local Toggle = Mainy:AddToggle("Freeze Spammy", {Title = "Freeze Ability Spammer", Default = false })
Toggle:OnChanged(function(Value)
  local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local sus = Value

local function Freezer()
    if sus then
        print("Freeze Spammer is enabled | FroZen Hub X")
        while sus do
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Freeze"):FireServer()
            wait()
        end
    else
        print("Freeze Spammer is disabled | FroZen Hub X")
    end
end

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.B then
        Freezer()
    end
end)
end)

local Money = Tabs.Main:AddSection("Money Features")

Money:AddButton({
        Title = "Open Sword Crate",
        Description = "will open one common sword crate",
        Callback = function()
            SwordCrateManual()
        end
    })
    
Money:AddButton({
        Title = "Open Explosion Crate",
        Description = "will open one common explosion crate",
        Callback = function()
            ExplosionCrateManual()
        end
    })
    
local Toggle = Money:AddToggle("SwordAuto", {Title = "Auto Open Sword Crate", Default = false })
Toggle:OnChanged(function(Value)
_G.AutoSword = Value
        SwordCrateAuto()
end)

local Toggle = Money:AddToggle("ExplosionAuto", {Title = "Auto Open Explosion Crate", Default = false })
Toggle:OnChanged(function(Value)
_G.AutoBoom = Value
        ExplosionCrateAuto()
end)

--misc
local Misc = Tabs.Misc:AddSection("Misc")

Misc:AddButton({
        Title = "Mobile Keyboard",
        Description = "launches a GUI that mimics a Keyboard.",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/advxzivhsjjdhxhsidifvsh/mobkeyboard/main/main.txt", true))()
        end
    })
    
Misc:AddButton({
        Title = "Infinite Yield",
        Description = "I dont think i have to explain what this is.",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source", true))()
        end
    })

--credits
local Credits = Tabs.Credits:AddSection("Credits")

Credits:AddParagraph({
        Title = "Credits",
        Content = "Script was made by Starfall.lua on GitHub"
    })

Credits:AddButton({
        Title = "Copy Discord Link",
        Description = "https://dsc.gg/frozen-x",
        Callback = function()
            setclipboard("https://dsc.gg/exploitx")
        end
    })
    
    
    print("Stinky")
